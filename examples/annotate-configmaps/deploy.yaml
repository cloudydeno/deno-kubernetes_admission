apiVersion: v1
kind: Namespace
metadata:
  name: example1

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: webhook1-certificate
  namespace: example1
spec:
  secretName: webhook1-certificate
  commonName: webhook1.example1.svc.cluster.local
  dnsNames:
  - webhook1.example1.svc.cluster.local
  - webhook1.example1.svc
  issuerRef:
    name: webhook1
  duration: 1h
  renewBefore: 55m

---

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: webhook1
  namespace: example1
spec:
  selfSigned: {}

---

apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: webhook1
  annotations:
    cert-manager.io/inject-ca-from: example1/webhook1-certificate
webhooks:
- admissionReviewVersions:
  - v1
  name: webhook1.example1.svc.cluster.local
  failurePolicy: Ignore
  matchPolicy: Exact
  sideEffects: None
  reinvocationPolicy: IfNeeded
  clientConfig:
    service:
      namespace: example1
      name: webhook1
      path: /admission/mutate
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - ""
    apiVersions:
    - v1
    resources:
    - configmaps
    scope: Namespaced

---

apiVersion: v1
kind: Service
metadata:
  name: webhook1
  namespace: example1
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 8443
    name: admission
  selector:
    app.kubernetes.io/name: webhook1
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook1
  namespace: example1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: webhook1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webhook1
    spec:
      containers:
      - name: app
        image: gcr.io/denodir/kubernetes_admission/annotate-configmaps:alpine
        imagePullPolicy: Always
        env:
        - name: WEBHOOK_TLS_DIRECTORY
          value: /run/secret/webhook-tls
        ports:
        - name: admission
          containerPort: 8443
          protocol: TCP
        resources: {}
        securityContext:
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tls
          mountPath: /run/secret/webhook-tls
      restartPolicy: Always
      volumes:
      - name: tls
        secret:
          secretName: webhook1-certificate
